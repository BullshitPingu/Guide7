plugins {
    id 'com.github.triplet.play' version '2.1.0'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

/**
 * Get the name of the working branch of the project
 *
 * @return Name of the working branch
 */
def getWorkingBranch() {
    def isRunningOnTravis = System.getenv("CI") == "true"

    if (isRunningOnTravis) {
        return System.getenv("TRAVIS_BRANCH");
    } else {
        def workingBranch = ""

        def proc = "git rev-parse --abbrev-ref HEAD".execute()

        proc.in.eachLine { line -> workingBranch = line }
        proc.err.eachLine { line -> println line }
        proc.waitFor()

        println workingBranch

        return workingBranch
    }
}

def getPublishingTrack() {
    def workingBranch = getWorkingBranch()

    if (workingBranch.equalsIgnoreCase("alpha")) {
        return "alpha"
    } else if (workingBranch.equalsIgnoreCase("beta")) {
        return "beta"
    } else if (workingBranch.equalsIgnoreCase("stable")) {
        return "production"
    } else {
        return "internal"
    }
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "de.be.thaw"
        minSdkVersion 18
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def isRunningOnTravis = System.getenv("CI") == "true"

    signingConfigs {
        release
    }

    buildTypes {
        release {
            if (isRunningOnTravis) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }

    if (isRunningOnTravis) {
        // Configure keystore
        signingConfigs.release.storeFile = file("../../.travis/guide7_keystore.jks")
        signingConfigs.release.storePassword = System.getenv("keystore_password")
        signingConfigs.release.keyAlias = System.getenv("keystore_alias")
        signingConfigs.release.keyPassword = System.getenv("keystore_alias_password")
    }
}

play {
    serviceAccountCredentials = file("../../.travis/api-8382503924831001465-189898-6da3f809c6e2.json")
    track = getPublishingTrack()
    userFraction = 1.0
    releaseStatus = "completed"
    resolutionStrategy = "fail"
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
